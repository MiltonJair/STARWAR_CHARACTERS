# -*- coding: utf-8 -*-
"""ETL - SWAPI

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CjZGZn-c4m6SFQKI7NcnPTvkL1mCIT8y
"""

import pandas as pd
import json
import requests

# Constantes
SWAPI_ENDPOINT = 'https://swapi.py4e.com/api/'
CATEGORIES = {
    'films': f"{SWAPI_ENDPOINT}/films/",
    'people': f"{SWAPI_ENDPOINT}/people/",
    'planets': f"{SWAPI_ENDPOINT}/planets/",
    'species': f"{SWAPI_ENDPOINT}/species/",
    'starships': f"{SWAPI_ENDPOINT}/starships/",
    'vehicles': f"{SWAPI_ENDPOINT}/vehicles/"
}

def get_all_swapi_data(category):
    all_data = []
    next_page = CATEGORIES[category]

    while next_page:
        response = requests.get(next_page)
        data = response.json()
        all_data.extend(data['results'])
        next_page = data['next']

    return all_data

def calculate_age(birth_year, release_dates):
    if birth_year == 'unknown':
        return 'unknown'

    try:
        birth_year_int = int(birth_year)
    except ValueError:
        # Handle special cases like '19BBY'
        return birth_year

    for release_date in release_dates:
        if birth_year_int <= release_date:
            return release_date - birth_year_int
    return release_dates[-1] - birth_year_int

def save_swapi_data_as_csv(category):
    swapi_data = get_all_swapi_data(category)
    dataframe = pd.DataFrame(swapi_data)
    dataframe.to_csv(f'swapi_{category}.csv', index=False)
    print(f"{category.capitalize()} data saved as CSV.")

def save_swapi_data_as_json(category):
    swapi_data = get_all_swapi_data(category)
    with open(f'swapi_{category}.json', 'w') as file:
        json.dump(swapi_data, file, indent=4)
    print(f"{category.capitalize()} data saved as JSON.")

# Obtener datos de películas y sus títulos con fechas de lanzamiento
films_data = get_all_swapi_data('films')
films_release_dates = {film['title']: int(film['release_date'][:4]) for film in films_data}

# Obtener datos de personas
people_data = get_all_swapi_data('people')

# Convertir la lista de datos de personas a un DataFrame de pandas
people_dataframe = pd.DataFrame(people_data)

# Calcular la edad de los personajes en la primera película
people_dataframe['age_at_first_film'] = people_dataframe.apply(lambda row: calculate_age(row['birth_year'], list(films_release_dates.values())), axis=1)

# Convertir las URL de homeworld a los nombres de los planetas
def get_homeworld_name(url):
    response = requests.get(url)
    data = response.json()
    return data['name']

people_dataframe['homeworld'] = people_dataframe['homeworld'].apply(get_homeworld_name)

# Convertir las URL de species a los nombres de las especies
def get_species_name(urls):
    species_names = []
    for url in urls:
        response = requests.get(url)
        data = response.json()
        species_names.append(data['name'])
    return species_names

people_dataframe['species'] = people_dataframe['species'].apply(get_species_name)

# Convertir las URL de vehicles a los nombres de los vehículos
def get_vehicle_name(urls):
    vehicle_names = []
    for url in urls:
        response = requests.get(url)
        data = response.json()
        vehicle_names.append(data['name'])
    return vehicle_names

people_dataframe['vehicles'] = people_dataframe['vehicles'].apply(get_vehicle_name)

# Convertir las URL de starships a los nombres de las naves estelares
def get_starship_name(urls):
    starship_names = []
    for url in urls:
        response = requests.get(url)
        data = response.json()
        starship_names.append(data['name'])
    return starship_names

people_dataframe['starships'] = people_dataframe['starships'].apply(get_starship_name)

# Convertir las URL de films a los títulos de las películas
def get_film_title(urls):
    film_titles = []
    for url in urls:
        response = requests.get(url)
        data = response.json()
        film_titles.append(data['title'])
    return film_titles

people_dataframe['films'] = people_dataframe['films'].apply(get_film_title)

# Agregar las columnas de segmentación de género y peso
# Segmentación de género
def segment_gender(gender):
    if gender == 'female':
        return 'Female'
    elif gender == 'male':
        return 'Male'
    elif gender == 'hermaphrodite':
        return 'Hermaphrodite'
    else:
        return 'N/A'

people_dataframe['gender_segment'] = people_dataframe['gender'].apply(segment_gender)

# Segmentación de peso
def segment_weight(weight):
    if weight == 'unknown':
        return 'Unknown'
    elif weight >= 15 and weight <= 35:
        return '15-35 kg'
    elif weight >= 36 and weight <= 70:
        return '36-70 kg'
    elif weight >= 71 and weight <= 80:
        return '71-80 kg'
    elif weight >= 81 and weight <= 100:
        return '81-100 kg'
    elif weight >= 101 and weight <= 140:
        return '101-140 kg'
    else:
        return '141+ kg'

# Convertir pesos desconocidos a valores numéricos
people_dataframe['mass_numeric'] = pd.to_numeric(people_dataframe['mass'], errors='coerce')

# Aplicar segmentación de peso
people_dataframe['weight_segment'] = people_dataframe['mass_numeric'].apply(segment_weight)

# Calcular la cantidad de películas en las que aparece cada personaje
people_dataframe['num_films'] = people_dataframe['films'].apply(len)

# Calcular el número de vehículos que posee cada personaje
people_dataframe['num_vehicles'] = people_dataframe['vehicles'].apply(len)

# Calcular el número de especies diferentes a las que pertenecen los personajes
people_dataframe['num_species'] = people_dataframe['species'].apply(lambda x: len(set(x)))

# Guardar datos de personas con sus edades en la primera película como archivo CSV
people_dataframe.to_csv('swapi_people_dateset.csv', index=False)

# Guardar todos los datos como archivos CSV y JSON
for category in CATEGORIES:
    save_swapi_data_as_csv(category)
    save_swapi_data_as_json(category)